{"version":3,"sources":["src/index.js"],"names":["rxjs","fromEvent","interval","operators","take","map","curves","d3","curveBasis","curveStep","curveLinear","curveCardinal","curveBundle","margin_size","point_size","colors","scaleOrdinal","schemeCategory10","domain_max","yAxisPadding","allItems","barWidth","latestDataOptions","labelDelay","pauseInterval","size","it","historyLine","line","curve","latency","timeMargin","timeDuration","shareValueRange","items","slice","historyFadeTime","historyDataSize","showRecentData","latestDataOption","trendType","showTimeAxis","showValueAxis","yAxis","undefined","timeAxis","localtimeScale","rootCanvas","yScale","dataCanvas","graph","subscribe","isPaused","margin","top","right","bottom","left","width","height","genData","numbers","dataRange","takeNumbers","pipe","ev","Math","floor","random","Date","now","getNow","toLocaleTimeString","sleep","milliseconds","date","currentDate","initControl","$","change","e","parseInt","value","updateChart","updateLatestGraph","checked","updateYAxis","updateTimeAxis","click","attr","append","call","axisBottom","ticks","timeSecond","every","remove","valueRange","length","item","index","scale","scaleLinear","rangeRound","domain","start","axisLeft","axis","drawFigure","history","x","y","color","moveDuration","text","select","empty","style","transition","duration","hisLength","sparkLine","sparkLineLength","figureXScale","scaleTime","range","figureYScale","figureLine","d","figureLineGraph","drawBar","offset","w","unsubscribe","realtimeVizsualization","stream","root","clipPath","startTime","endTime","graphTimeIndicator","currentTimeIndicator","lineData","historyLineGraph","nowIndicator","drift","timeDiffTotal","data","i","t","itemIndex","prevData","indexOf","itemYscale","itemLineData","push","getX","barRange","delay","isNew","minValue","min","maxValue","max","yHistoryScale","tickValues","recentData","classed","on","dataLable","t0","t1","te","tDiff","updateTimeScale","console","log"],"mappings":"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","file":"src.9c73b31f.js","sourceRoot":"..","sourcesContent":["import \"./styles.css\";\n\nconst { fromEvent, interval } = rxjs;\nconst { take, map } = rxjs.operators;\n\nconst curves = [\n  d3.curveBasis,\n  d3.curveStep,\n  d3.curveLinear,\n  d3.curveCardinal,\n  d3.curveBundle\n];\n\nconst margin_size = 50;\nconst point_size = 5;\nconst colors = d3.scaleOrdinal(d3.schemeCategory10);\nconst domain_max = 100;\nconst yAxisPadding = 20;\nconst allItems = [\"A\", \"B\", \"C\", \"D\", \"E\"];\nconst barWidth = 50;\n\n// following options are used for\n\nconst latestDataOptions = [\"point\", \"bar\", \"figure\"];\nconst labelDelay = 5; // define how may data label to show with delay\nconst pauseInterval = 3000;\n\nvar size = 600; //The size of the canvas\nvar it = 500; // interval defines how fast the data is coming\nvar historyLine = d3.line().curve(curves[0]);\nvar latency = 0;\nvar timeMargin = 100;\nvar timeDuration = 10000; // how long to view the time range in second\nvar shareValueRange = false;\nvar items = allItems.slice(0, 3); // how many catogrical data to show\nvar historyFadeTime = 5000;\nvar historyDataSize = 5;\nvar showRecentData = false;\nvar latestDataOption = \"point\";\nvar trendType = \"line\";\n\nvar showTimeAxis = true;\nvar showValueAxis = true;\n\nvar yAxis = undefined;\nvar timeAxis = undefined;\nvar localtimeScale = undefined;\nvar rootCanvas = undefined;\nvar yScale = undefined;\nvar dataCanvas = undefined;\nvar graph = undefined;\nvar subscribe = undefined;\n\nvar isPaused = false;\n\nvar margin = {\n  top: margin_size,\n  right: margin_size,\n  bottom: margin_size,\n  left: margin_size\n};\nvar width = size - margin.left - margin.right;\nvar height = size - margin.top - margin.bottom;\n\nfunction genData() {\n  const numbers = interval(it);\n  const takeCount = 1000; // how many data to take\n\n  const dataRange = {\n    min: 30,\n    max: 70\n  };\n\n  const dataPoint = function () {\n    return items.map(function () {\n      return (\n        Math.floor(Math.random() * (dataRange.max - dataRange.min)) +\n        dataRange.min\n      );\n    });\n  };\n\n  const takeNumbers = numbers.pipe(\n    take(takeCount),\n    map((ev) => [\n      dataPoint(),\n      ev,\n      Date.now() - Math.floor(Math.random() * latency)\n    ])\n  );\n\n  return takeNumbers;\n}\n\nfunction getNow() {\n  const now = new Date();\n  return new Date().toLocaleTimeString();\n}\n\n// simulat sleep here\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction initControl() {\n  $(\"#sizeInput\").change(function (e) {\n    size = parseInt(this.value);\n    width = size - margin.left - margin.right;\n    height = size - margin.top - margin.bottom;\n    updateChart();\n  });\n\n  $(\"#intervalInput\").change(function (e) {\n    it = parseInt(this.value);\n    updateChart();\n  });\n\n  $(\"#durationInput\").change(function (e) {\n    timeDuration = parseInt(this.value);\n    updateChart();\n  });\n\n  $(\"#timeMarginInput\").change(function (e) {\n    timeMargin = parseInt(this.value);\n  });\n\n  $(\"#curveSelect\").change(function (e) {\n    historyLine.curve(curves[parseInt(this.value)]);\n  });\n\n  $(\"#latestDataTypeSelect\").change(function (e) {\n    latestDataOption = latestDataOptions[parseInt(this.value)];\n    updateLatestGraph();\n  });\n\n  $(\"#numberInput\").change(function (e) {\n    items = allItems.slice(0, parseInt(this.value));\n    updateChart();\n  });\n\n  $(\"#shareValueRangeInput\").change(function (e) {\n    shareValueRange = this.checked;\n    updateYAxis();\n  });\n\n  $(\"#historyFadeInput\").change(function (e) {\n    historyFadeTime = parseInt(this.value);\n  });\n\n  $(\"#historySizeInput\").change(function (e) {\n    historyDataSize = parseInt(this.value);\n  });\n\n  $(\"#showRecentDataInput\").change(function (e) {\n    showRecentData = this.checked;\n  });\n\n  $(\"#showTimeAxisInput\").change(function (e) {\n    showTimeAxis = this.checked;\n    updateTimeAxis();\n  });\n\n  $(\"#trendAsBarCheck\").change(function (e) {\n    if (this.checked) {\n      trendType = \"bar\";\n    } else {\n      trendType = \"line\";\n    }\n  });\n\n  $(\"#showValueAxisInput\").change(function (e) {\n    showValueAxis = this.checked;\n    updateYAxis();\n  });\n\n  $(\"#restartButton\").click(function () {\n    updateChart();\n  });\n\n  $(\"#stopButton\").click(function () {\n    isPaused = !isPaused;\n    $(this).attr(\"disabled\", true);\n  });\n}\n\nfunction updateTimeAxis() {\n  if (!showTimeAxis) {\n    $(\".timeAxis\").remove();\n  } else {\n    timeAxis = rootCanvas\n      .append(\"g\")\n      .attr(\"class\", \"timeAxis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(localtimeScale).ticks(d3.timeSecond.every(2)));\n  }\n}\n\nfunction updateYAxis() {\n  $(\".yAxis\").remove();\n  $(\".historyDistribution\").remove(); // remove historiy distribution\n  const valueRange = height / items.length;\n  yScale = items.map(function (item, index) {\n    if (shareValueRange) {\n      const scale = d3.scaleLinear().rangeRound([height, 0]);\n      scale.domain([0, domain_max]);\n      return scale;\n    } else {\n      const start = height - index * valueRange;\n      const end = height - (index + 1) * valueRange;\n      const scale = d3\n        .scaleLinear()\n        .rangeRound([\n          height - index * valueRange,\n          height - (index + 1) * valueRange\n        ]);\n      scale.domain([0, domain_max]);\n      return scale;\n    }\n  });\n\n  if (showValueAxis) {\n    if (shareValueRange) {\n      yAxis = rootCanvas\n        .append(\"g\")\n        .attr(\"class\", \"yAxis\")\n        .attr(\"transform\", \"translate(\" + -yAxisPadding + \", 0) \")\n        .call(d3.axisLeft(yScale[0]).ticks(0));\n    } else {\n      yAxis = yScale.map(function (scale) {\n        const axis = rootCanvas\n          .append(\"g\")\n          .attr(\"class\", \"yAxis\")\n          .attr(\"transform\", \"translate(\" + -yAxisPadding + \", 0) \")\n          .call(d3.axisLeft(scale).ticks(0));\n        return axis;\n      });\n    }\n  }\n}\n\nfunction updateLatestGraph() {\n  $(\".latest\").remove();\n  // the graph is for the latested data point\n  // should better start from current position\n  graph = items.map(function (item) {\n    if (latestDataOption == \"bar\") {\n      return dataCanvas\n        .append(\"rect\")\n        .attr(\"class\", \"latest\")\n        .attr(\"new\", \"1\")\n        .attr(\"x\", 0)\n        .attr(\"y\", height)\n        .attr(\"width\", barWidth)\n        .attr(\"height\", 0);\n    } else if (latestDataOption == \"figure\") {\n      return dataCanvas.append(\"g\").attr(\"class\", \"latest\").attr(\"new\", \"1\");\n    }\n\n    return dataCanvas\n      .append(\"circle\")\n      .attr(\"class\", \"latest\")\n      .attr(\"new\", \"1\")\n      .attr(\"cx\", 0)\n      .attr(\"cy\", height)\n      .attr(\"r\", 0);\n  });\n}\n\nfunction drawFigure(graph, value, history, x, y, color, moveDuration) {\n  var text = graph.select(\".figureValue\");\n\n  if (text.empty()) {\n    graph\n      .append(\"text\")\n      .attr(\"class\", \"figureValue\")\n      .attr(\"x\", x)\n      .attr(\"y\", y)\n      .text(value)\n      .style(\"fill\", color)\n      .style(\"font-size\", 96);\n  } else {\n    text\n      .transition()\n      .duration(moveDuration)\n      .attr(\"x\", x)\n      .attr(\"y\", y)\n      .text(value);\n  }\n\n  const hisLength = history.length;\n\n  var sparkLine = history;\n  if (hisLength > 20) {\n    sparkLine = history.slice(hisLength - 20, hisLength);\n  }\n\n  const sparkLineLength = sparkLine.length;\n\n  const figureXScale = d3.scaleTime().range([0, 100]);\n  figureXScale.domain([sparkLine[0][2], sparkLine[sparkLineLength - 1][2]]);\n\n  const figureYScale = d3.scaleLinear().rangeRound([50, 0]);\n  figureYScale.domain([0, domain_max]);\n\n  const figureLine = d3.line().curve(curves[3]);\n\n  figureLine.x(function (d) {\n    return figureXScale(d[2]);\n  });\n\n  figureLine.y(function (d) {\n    return figureYScale(d[0]);\n  });\n\n  var figureLineGraph = graph.select(\".figureLine\");\n\n  if (figureLineGraph.empty()) {\n    figureLineGraph = graph\n      .append(\"path\")\n      .attr(\"class\", \"figureLine\")\n      .style(\"stroke\", color);\n  }\n\n  figureLineGraph\n    .transition()\n    .duration(moveDuration)\n    .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\n    .attr(\"d\", figureLine(sparkLine));\n}\n\nfunction drawBar(graph, offset, x, y, height, color) {\n  var w = (20 * it) / 500;\n  if (shareValueRange) {\n    w = w / items.length;\n  }\n  graph\n    .append(\"rect\")\n    .attr(\"class\", \"trend\")\n    .attr(\"x\", x + offset - w / 2 + offset * w)\n    .attr(\"y\", y + height)\n    .attr(\"width\", w)\n    .attr(\"height\", 0)\n    .style(\"fill\", color)\n    .transition()\n    .duration(it)\n    .attr(\"y\", y)\n    .attr(\"height\", height);\n}\n\nfunction updateChart() {\n  $(\"#chart\").empty();\n  if (subscribe) {\n    subscribe.unsubscribe();\n  }\n\n  const stream = genData();\n  realtimeVizsualization(stream);\n}\n\nfunction realtimeVizsualization(stream) {\n  const root = d3\n    .select(\"#chart\")\n    .append(\"svg\")\n    .attr(\"width\", size)\n    .attr(\"height\", size);\n\n  rootCanvas = root\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  // define the clipPath\n  const clipPath = rootCanvas\n    .append(\"clipPath\")\n    .attr(\"id\", \"rect-clip\")\n    .append(\"rect\")\n    .attr(\"x\", 0)\n    .attr(\"y\", 0)\n    .attr(\"width\", size)\n    .attr(\"height\", size);\n\n  dataCanvas = rootCanvas.append(\"g\").attr(\"clip-path\", \"url(#rect-clip)\");\n\n  updateYAxis();\n\n  localtimeScale = d3.scaleTime().range([0, width]);\n  const startTime = Date.now();\n  const endTime = startTime + timeDuration;\n  localtimeScale.domain([startTime, endTime]);\n\n  if (showTimeAxis) {\n    timeAxis = rootCanvas\n      .append(\"g\")\n      .attr(\"class\", \"timeAxis\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(localtimeScale).ticks(d3.timeSecond.every(2)));\n  }\n\n  // the graph is for the latested data point\n  updateLatestGraph();\n\n  const graphTimeIndicator = dataCanvas\n    .append(\"circle\")\n    .attr(\"cx\", 0)\n    .attr(\"cy\", height)\n    .attr(\"r\", 5)\n    .attr(\"class\", \"data-time-indicator\");\n\n  const currentTimeIndicator = dataCanvas\n    .append(\"circle\")\n    .attr(\"cx\", 0)\n    .attr(\"cy\", height - 10)\n    .attr(\"r\", 5)\n    .attr(\"class\", \"current-time-indicator\");\n\n  const lineData = items.map(function (item) {\n    return [];\n  });\n\n  const historyLineGraph = items.map(function (item) {\n    return dataCanvas.append(\"path\").attr(\"class\", \"line\");\n  });\n\n  const nowIndicator = rootCanvas\n    .append(\"text\")\n    .attr(\"class\", \"now\")\n    .attr(\"x\", size / 2 - 80)\n    .attr(\"y\", height + 50)\n    .text(getNow());\n\n  historyLine.x(function (d) {\n    return localtimeScale(d[2]);\n  });\n\n  var drift = 0;\n  var tDiffTotal = 0;\n  var timeDiffTotal = 0;\n\n  // consume data by subcribe the stream\n  subscribe = stream.subscribe(([data, i, t]) => {\n    if (isPaused) {\n      sleep(pauseInterval);\n      $(\"#stopButton\").attr(\"disabled\", false);\n      isPaused = false;\n    }\n\n    // two indicator on time axis\n    graphTimeIndicator.transition().duration(it).attr(\"cx\", localtimeScale(t));\n    currentTimeIndicator\n      .transition()\n      .duration(it)\n      .attr(\"cx\", localtimeScale(Date.now()));\n\n    // draw a line for each catagorical item\n    // TODO : should use d3 selection\n    items.map(function (item) {\n      const itemIndex = items.indexOf(item);\n      const color = colors(item);\n\n      const d = data[itemIndex];\n      const itemYscale = yScale[itemIndex];\n\n      const itemLineData = lineData[itemIndex];\n      var prevData;\n      if (itemLineData.length > 0) {\n        prevData = itemLineData[itemLineData.length - 1];\n      }\n\n      itemLineData.push([d, i, t]);\n      const getX = function () {\n        const barRange = size / items.length;\n        return timeDuration == 0\n          ? itemIndex * barRange + barWidth / 2\n          : localtimeScale(t);\n      };\n\n      // transition historical trend\n      if (timeDuration != 0) {\n        if (trendType == \"bar\") {\n          var offset = 0;\n          if (shareValueRange) {\n            offset = itemIndex;\n          }\n\n          drawBar(\n            dataCanvas,\n            offset,\n            getX(),\n            itemYscale(d),\n            itemYscale.range()[0] - itemYscale(d),\n            color\n          );\n        } else {\n          historyLine.y(function (d) {\n            return itemYscale(d[0]);\n          });\n\n          historyLineGraph[itemIndex]\n            .transition()\n            .delay(it)\n            .attr(\"d\", historyLine(itemLineData))\n            .style(\"stroke\", color);\n        }\n      }\n\n      // move current data\n      if (timeDuration == 0) {\n        const isNew = graph[itemIndex].attr(\"new\");\n        const moveDuration = isNew == \"1\" ? 0 : it;\n\n        if (latestDataOption == \"bar\") {\n          graph[itemIndex]\n            .transition()\n            .duration(moveDuration)\n            .attr(\"x\", getX())\n            .attr(\"y\", itemYscale(d))\n            .attr(\"height\", itemYscale.range()[0] - itemYscale(d))\n            .style(\"fill\", color);\n        } else if (latestDataOption == \"figure\") {\n          drawFigure(\n            graph[itemIndex],\n            d,\n            itemLineData,\n            getX(),\n            itemYscale(50),\n            color,\n            moveDuration\n          );\n        } else {\n          graph[itemIndex]\n            .transition()\n            .duration(it)\n            .attr(\"cx\", getX())\n            .attr(\"cy\", itemYscale(d))\n            .attr(\"r\", 5)\n            .style(\"fill\", color);\n        }\n\n        if (isNew == \"1\") {\n          graph[itemIndex].attr(\"new\", \"0\");\n        }\n      } else {\n        graph[itemIndex]\n          .transition()\n          .duration(it)\n          .attr(\"cx\", getX())\n          .attr(\"cy\", itemYscale(d))\n          .attr(\"r\", 5)\n          .style(\"fill\", color);\n      }\n\n      // draw a delta line of new moving data\n      if (prevData && timeDuration != 0) {\n        const deltaLine = dataCanvas\n          .append(\"line\")\n          .attr(\"x1\", localtimeScale(prevData[2]))\n          .attr(\"y1\", itemYscale(prevData[0]))\n          .attr(\"x2\", localtimeScale(prevData[2]))\n          .attr(\"y2\", itemYscale(prevData[0]))\n          .attr(\"class\", \"deltaline\")\n          .attr(\"stroke\", color)\n          .attr(\"stroke-width\", 2)\n          .transition()\n          .duration(it)\n          .attr(\"x2\", localtimeScale(t))\n          .attr(\"y2\", itemYscale(d));\n\n        deltaLine.transition().duration(0).attr(\"stroke-width\", 0);\n        // todo : how to remove delta line here\n      }\n\n      // min/max indicator\n      // TODO: min/max should be all data\n      if (showValueAxis) {\n        const minValue = d3.min(itemLineData, (d) => d[0]);\n        const maxValue = d3.max(itemLineData, (d) => d[0]);\n\n        const yHistoryScale = d3\n          .scaleLinear()\n          .rangeRound([itemYscale(minValue), itemYscale(maxValue)]);\n        yHistoryScale.domain([minValue, maxValue]);\n\n        if (shareValueRange) {\n          yAxis\n            .transition()\n            .call(\n              d3\n                .axisLeft(yHistoryScale)\n                .tickValues(yHistoryScale.domain())\n                .ticks(3)\n            );\n        } else {\n          yAxis[itemIndex]\n            .transition()\n            .call(\n              d3\n                .axisLeft(yHistoryScale)\n                .tickValues(yHistoryScale.domain())\n                .ticks(3)\n            );\n        }\n\n        // historical data distribution\n        // jitter 10 on x axis\n        rootCanvas\n          .append(\"circle\")\n          .attr(\"class\", \"historyDistribution\")\n          .attr(\"cx\", -yAxisPadding + Math.floor(Math.random() * 10))\n          .attr(\"cy\", itemYscale(d))\n          .attr(\"r\", 2)\n          .style(\"fill\", color)\n          .style(\"opacity\", 0.3);\n      }\n\n      if (showRecentData) {\n        // fade out recent data and label\n        const recentData = dataCanvas\n          .append(\"circle\")\n          .attr(\"cx\", getX())\n          .attr(\"cy\", itemYscale(d))\n          .attr(\"r\", 0)\n          .classed(\"circle\", true)\n          .style(\"fill-opacity\", 0.5);\n\n        recentData\n          .transition()\n          .delay(it)\n          .attr(\"x\", getX())\n          .attr(\"cy\", itemYscale(d))\n          .attr(\"r\", historyDataSize)\n          .style(\"fill\", color)\n          .transition()\n          .duration(historyFadeTime)\n          .attr(\"r\", 0)\n          .on(\"end\", function () {\n            recentData.remove();\n          });\n\n        const dataLable = dataCanvas\n          .append(\"text\")\n          .attr(\"class\", \"dataLabel\")\n          .attr(\"x\", getX() + 10)\n          .attr(\"y\", itemYscale(d) - 10)\n          .attr(\"font-size\", 12);\n\n        dataLable\n          .transition()\n          .delay(it)\n          .text(d)\n          .transition()\n          .duration(it * labelDelay)\n          .attr(\"font-size\", 0)\n          .on(\"end\", function () {\n            dataLable.remove();\n          });\n      }\n    });\n\n    const itemLineData = lineData[0];\n\n    if (itemLineData.length > 1) {\n      const prevData = itemLineData[itemLineData.length - 1];\n      const timeDiff = t - prevData[2];\n      // draw current time\n      const currentTimePosition = localtimeScale(Date.now()) - 50;\n      nowIndicator.text(getNow());\n    }\n\n    // Need update when to start moving\n    // Need new algo to update time axis\n\n    if (itemLineData.length > 2 && timeDuration != 0) {\n      const prevData = itemLineData[itemLineData.length - 2];\n\n      const t0 = localtimeScale(t); // current time position\n      const t1 = localtimeScale(prevData[2]); // last time position\n      const te = localtimeScale(endTime + timeDiffTotal); //end position\n\n      // move data canvas when there is only 100ms left\n      if (te - t0 < timeMargin) {\n        // following code shif the canvas to one time delta from right to left\n        const tDiff = t0 - t1;\n        tDiffTotal += tDiff;\n        timeDiffTotal += t - prevData[2];\n        drift -= tDiff;\n\n        dataCanvas\n          .transition()\n          .duration(it)\n          .attr(\"transform\", \"translate(\" + drift + \",\" + 0 + \")\");\n\n        // move clip region\n        clipPath.attr(\"x\", -drift).attr(\"width\", size - drift);\n\n        // update time axis\n        const updateTimeScale = d3.scaleTime().range([0, width]);\n        updateTimeScale.domain([\n          startTime + timeDiffTotal,\n          endTime + timeDiffTotal\n        ]);\n\n        if (showTimeAxis) {\n          timeAxis\n            .transition()\n            .duration(it)\n            .call(d3.axisBottom(updateTimeScale).ticks(d3.timeSecond.every(2)));\n        }\n      }\n    }\n  });\n}\n\n$(function () {\n  console.log(\"ready!\");\n  // fromEvent(document, \"click\").subscribe(() => console.log(\"Clicked!\"));\n\n  initControl();\n  updateChart();\n});\n"]}